{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNAxYivqXI7tdszUK+VnYqR",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/AimanHakimiSE/Heart_Disease_App/blob/main/Notebook\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Goals:** *Predict patient has heart disease using clinical attributes*"
      ],
      "metadata": {
        "id": "_J11p60OPf3L"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **1.0 Import Libraries**"
      ],
      "metadata": {
        "id": "W_1mmQZkHoKu"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "64GC6c1wHixS"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler, LabelEncoder\n",
        "from sklearn.metrics import accuracy_score, f1_score, roc_auc_score, confusion_matrix, classification_report, roc_curve\n",
        "\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.svm import SVC\n",
        "import xgboost as xgb"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **2.0 Load Dataset**"
      ],
      "metadata": {
        "id": "Q2LY0FsTH2BY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "uploaded = files.upload()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 73
        },
        "id": "yl3Wun3PH47q",
        "outputId": "7cc802a5-b517-44b6-fd07-d10c6764caf3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-2550f87f-1617-47ad-a630-c90eb8d18799\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-2550f87f-1617-47ad-a630-c90eb8d18799\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving heart_cleveland_upload.csv to heart_cleveland_upload.csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 2.1 Read CSV"
      ],
      "metadata": {
        "id": "su6S20lbH9wT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv(\"heart_cleveland_upload.csv\")"
      ],
      "metadata": {
        "id": "nhx-_iEuIHvp"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 2.2 View CSV"
      ],
      "metadata": {
        "id": "qyGuxV0WIK-A"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "Sp1ugtTYIOaM",
        "outputId": "49892114-12f2-460a-b327-d418b582b5f6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   age  sex  cp  trestbps  chol  fbs  restecg  thalach  exang  oldpeak  slope  \\\n",
              "0   69    1   0       160   234    1        2      131      0      0.1      1   \n",
              "1   69    0   0       140   239    0        0      151      0      1.8      0   \n",
              "2   66    0   0       150   226    0        0      114      0      2.6      2   \n",
              "3   65    1   0       138   282    1        2      174      0      1.4      1   \n",
              "4   64    1   0       110   211    0        2      144      1      1.8      1   \n",
              "\n",
              "   ca  thal  condition  \n",
              "0   1     0          0  \n",
              "1   2     0          0  \n",
              "2   0     0          0  \n",
              "3   1     0          1  \n",
              "4   0     0          0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d55e7177-28bd-4410-82b5-9ab66916b808\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>sex</th>\n",
              "      <th>cp</th>\n",
              "      <th>trestbps</th>\n",
              "      <th>chol</th>\n",
              "      <th>fbs</th>\n",
              "      <th>restecg</th>\n",
              "      <th>thalach</th>\n",
              "      <th>exang</th>\n",
              "      <th>oldpeak</th>\n",
              "      <th>slope</th>\n",
              "      <th>ca</th>\n",
              "      <th>thal</th>\n",
              "      <th>condition</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>69</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>160</td>\n",
              "      <td>234</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>131</td>\n",
              "      <td>0</td>\n",
              "      <td>0.1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>69</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>140</td>\n",
              "      <td>239</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>151</td>\n",
              "      <td>0</td>\n",
              "      <td>1.8</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>66</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>150</td>\n",
              "      <td>226</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>114</td>\n",
              "      <td>0</td>\n",
              "      <td>2.6</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>65</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>138</td>\n",
              "      <td>282</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>174</td>\n",
              "      <td>0</td>\n",
              "      <td>1.4</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>64</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>110</td>\n",
              "      <td>211</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>144</td>\n",
              "      <td>1</td>\n",
              "      <td>1.8</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d55e7177-28bd-4410-82b5-9ab66916b808')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d55e7177-28bd-4410-82b5-9ab66916b808 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d55e7177-28bd-4410-82b5-9ab66916b808');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-1edd1200-9e51-4bef-aca5-a5631b641ac5\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1edd1200-9e51-4bef-aca5-a5631b641ac5')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-1edd1200-9e51-4bef-aca5-a5631b641ac5 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 297,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9,\n        \"min\": 29,\n        \"max\": 77,\n        \"num_unique_values\": 41,\n        \"samples\": [\n          50,\n          42,\n          58\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sex\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"trestbps\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 17,\n        \"min\": 94,\n        \"max\": 200,\n        \"num_unique_values\": 50,\n        \"samples\": [\n          148,\n          144\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"chol\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 51,\n        \"min\": 126,\n        \"max\": 564,\n        \"num_unique_values\": 152,\n        \"samples\": [\n          360,\n          341\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"fbs\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"restecg\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          2,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"thalach\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 22,\n        \"min\": 71,\n        \"max\": 202,\n        \"num_unique_values\": 91,\n        \"samples\": [\n          170,\n          164\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"exang\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"oldpeak\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.1661227818468956,\n        \"min\": 0.0,\n        \"max\": 6.2,\n        \"num_unique_values\": 40,\n        \"samples\": [\n          0.7,\n          0.3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"slope\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ca\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"thal\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 2,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          0,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"condition\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **3.0 Explore Dataset (EDA)**"
      ],
      "metadata": {
        "id": "5V7OaSP-I7bV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(df.info())\n",
        "print(df.describe())\n",
        "print(df.isnull().sum())   # Check missing values\n",
        "print(df.duplicated().sum()) # Check duplicates"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "86eEFOheI_ng",
        "outputId": "4504cffe-997f-45ef-fc69-da4e4e0850c1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 297 entries, 0 to 296\n",
            "Data columns (total 14 columns):\n",
            " #   Column     Non-Null Count  Dtype  \n",
            "---  ------     --------------  -----  \n",
            " 0   age        297 non-null    int64  \n",
            " 1   sex        297 non-null    int64  \n",
            " 2   cp         297 non-null    int64  \n",
            " 3   trestbps   297 non-null    int64  \n",
            " 4   chol       297 non-null    int64  \n",
            " 5   fbs        297 non-null    int64  \n",
            " 6   restecg    297 non-null    int64  \n",
            " 7   thalach    297 non-null    int64  \n",
            " 8   exang      297 non-null    int64  \n",
            " 9   oldpeak    297 non-null    float64\n",
            " 10  slope      297 non-null    int64  \n",
            " 11  ca         297 non-null    int64  \n",
            " 12  thal       297 non-null    int64  \n",
            " 13  condition  297 non-null    int64  \n",
            "dtypes: float64(1), int64(13)\n",
            "memory usage: 32.6 KB\n",
            "None\n",
            "              age         sex          cp    trestbps        chol         fbs  \\\n",
            "count  297.000000  297.000000  297.000000  297.000000  297.000000  297.000000   \n",
            "mean    54.542088    0.676768    2.158249  131.693603  247.350168    0.144781   \n",
            "std      9.049736    0.468500    0.964859   17.762806   51.997583    0.352474   \n",
            "min     29.000000    0.000000    0.000000   94.000000  126.000000    0.000000   \n",
            "25%     48.000000    0.000000    2.000000  120.000000  211.000000    0.000000   \n",
            "50%     56.000000    1.000000    2.000000  130.000000  243.000000    0.000000   \n",
            "75%     61.000000    1.000000    3.000000  140.000000  276.000000    0.000000   \n",
            "max     77.000000    1.000000    3.000000  200.000000  564.000000    1.000000   \n",
            "\n",
            "          restecg     thalach       exang     oldpeak       slope          ca  \\\n",
            "count  297.000000  297.000000  297.000000  297.000000  297.000000  297.000000   \n",
            "mean     0.996633  149.599327    0.326599    1.055556    0.602694    0.676768   \n",
            "std      0.994914   22.941562    0.469761    1.166123    0.618187    0.938965   \n",
            "min      0.000000   71.000000    0.000000    0.000000    0.000000    0.000000   \n",
            "25%      0.000000  133.000000    0.000000    0.000000    0.000000    0.000000   \n",
            "50%      1.000000  153.000000    0.000000    0.800000    1.000000    0.000000   \n",
            "75%      2.000000  166.000000    1.000000    1.600000    1.000000    1.000000   \n",
            "max      2.000000  202.000000    1.000000    6.200000    2.000000    3.000000   \n",
            "\n",
            "             thal   condition  \n",
            "count  297.000000  297.000000  \n",
            "mean     0.835017    0.461279  \n",
            "std      0.956690    0.499340  \n",
            "min      0.000000    0.000000  \n",
            "25%      0.000000    0.000000  \n",
            "50%      0.000000    0.000000  \n",
            "75%      2.000000    1.000000  \n",
            "max      2.000000    1.000000  \n",
            "age          0\n",
            "sex          0\n",
            "cp           0\n",
            "trestbps     0\n",
            "chol         0\n",
            "fbs          0\n",
            "restecg      0\n",
            "thalach      0\n",
            "exang        0\n",
            "oldpeak      0\n",
            "slope        0\n",
            "ca           0\n",
            "thal         0\n",
            "condition    0\n",
            "dtype: int64\n",
            "0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 3.1 Plot Target Distribution"
      ],
      "metadata": {
        "id": "2RVt6BTZJHRr"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sns.countplot(x='condition', data=df)\n",
        "plt.title(\"Heart Disease Distribution (0=No, 1=Yes)\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "p-7ZYDroJLwB",
        "outputId": "24e44170-829f-4f3f-e908-3600cc2789ba"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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tNGMGTNUuXJlhYaGKjs7W999951mzZolSapSpUqZH2OVKlX08MMP67XXXtPBgwfVuHHjEsc99dRTeuuttzR06FA1atRIP/30k/773//q0KFDuueeeyRd/oHfuXNnRUVFacKECXJzc9PixYvVoUMHffrpp2rVqpUkaceOHfr8888VHx+vWrVq6fjx41qwYIHat2+vgwcPqnLlypIu/8JOTk7Wk08+qVatWiknJ0c7d+7U7t279cADD0iSDhw4oNatW+u2227T888/L19fX/3nP/9Rjx49tHr1aj388MNlfm4iIiLUrl07bdq0STk5OfLz8ytxXK9evXTgwAENGzZMderUUUZGhtavX6+TJ0+qTp06mj17toYNG6YqVaror3/9q6TLv8yuNHjwYNWoUUPjx4+/5lqJI0eO6NFHH9VTTz2lhIQELV68WL1799a6devsz8v1up7arrRkyRINGDBALVu2VHJystLT0/Xyyy/rs88+c3idS9KlS5cUFxen6OhozZgxQxs2bNDMmTNVr149Pf3001et6/PPP9ddd90lDw8Ph/Y9e/bojjvuKPZ/UfTa2rt3r8LDwyVdfv+W9F79NW9v7xLfQxMnTlTbtm21YMECJSUllbr9hg0b1LlzZ91+++2aOHGizp07p7lz56p169bavXt3mf8YuV4l/YwqSdWqVeXl5WW/P3/+fDVu3FgjRoxQnz599O677yolJUWhoaFKT0/XvffeK5vNpqFDh6pGjRr68MMPlZiYqJycHA0fPlyS9Oqrr+qZZ57RI488omeffVbnz5/Xl19+qW3btulPf/qTw/HvueeeYn/4wEkqemoJt6aiqeqr3a48jXX8+HFTqVIlM3XqVIf9fPXVV8bd3d2hvWhq+krJycnGZrOZEydO2NsSEhKMJPP8888XG++s01hFZs2aZSSZd955x94myUyYMMF+39/fv8TTPUUKCwtNgwYNTFxcnMN5+bNnz5q6deuaBx54wKHt11JTU40ks2zZMntb06ZNr3nKpmPHjqZJkybm/PnzDrXcd999pkGDBlfd1pjST2MVefbZZ40ks2/fPmOMMceOHTOSzOLFi40xl9c/6FenVUpS2qmiotdamzZtiq0DKuo7duyYva127dpGklm9erW9LTs729SsWdM0b97c3jZhwoQST32UtM/Satu0aZORZDZt2mSMMebChQsmODjY3HXXXebcuXP2ce+//76RZMaPH29vK3r9Tp482WGfzZs3N1FRUcWO9Wu1atUyvXr1KtbeuHFj06FDh2LtBw4cMJJMSkqKva1du3bXfB9LMgkJCQ77uvI1cf/995vQ0FD7a7ak01jNmjUzwcHB5qeffrK37du3z7i5uZn+/ftf87Fey7VOY13PY7zyNXulGTNmGEkmMDDQYQ1PYmKiqVmzpvnxxx8dxsfHxxt/f3/789G9e/frPqU/aNAg4+Pjc52PGr8FMzu4IfPmzdMdd9xRrH3kyJEOU/Fvv/22CgsL1adPH4e/skJDQ9WgQQNt2rRJ/+///T9JcpiazsvL07lz53TffffJGKM9e/YoIiLC4VjX+gvYGYr+qv3ll19KHRMQEKBt27bp+++/V1hYWLH+vXv36siRI/rb3/6mn376yaGvY8eOWr58uQoLC+Xm5ubwHBQUFCgnJ0f169dXQECAdu/erX79+tmPeeDAAR05ckQNGjQodszMzEx98sknmjx5sn755ReH+uPi4jRhwgSdPn1at9122297Qq5wrefGx8dHnp6e2rx5sxITE1WtWrUyHWfgwIGqVKnSdY0NCwtzmLHy8/NT//79NW3aNKWlpSk0NLRMNVzLzp07lZGRoYkTJ8rb29ve3rVrV0VGRuqDDz7QpEmTHLZ56qmnHO7/4Q9/0PLly695rJ9++qnE5/LcuXMOsxNFiuq58pTTzJkz9fPPP1/zWCW9notMnDhR7dq1U0pKikaMGFGs/4cfftDevXs1evRoBQYG2tvvvvtuPfDAA/qf//mfax7/Rl3vlWglzdoOHz5cy5Yt0/79+7Vw4ULZbDYZY7R69Wr16dNHxhiHn2lxcXF64403tHv3brVu3VoBAQH67rvvtGPHDrVs2fKqx69WrZrOnTuns2fP2mdv4RyEHdyQVq1aqUWLFsXaq1Wr5vAD4MiRIzLGlPgLWZLDVPzJkyc1fvx4vfvuu8V+EGdnZzvcd3d3t6/fKE+5ubmSLk9zl2b69OlKSEhQeHi4oqKi1KVLF/Xv31+33367pMvPgSQlJCSUuo/s7Gz7D7zk5GQtXrxYp0+fdlgrdOVzMHnyZHXv3l133HGH7rrrLnXq1En9+vXT3XffLUn69ttvZYzRuHHjNG7cuBKPmZGRcUNh51rPjZeXl6ZNm6aRI0cqJCRE9957rx566CH179//N4WOunXrXvfY+vXrF1uPUxTKjx8/Xm5h58SJE5KkO++8s1hfZGSk/vvf/zq0eXt7q0aNGg5t1apVu64AIsnhdVHEx8enxM9rOX/+vL2/SFRU1HUd52ratm2r+++/X9OnTy8W3KSrPycNGzbURx99pLy8PPn6+t5wLaWJjY0t87aVKlVS8+bNdfToUXsYOnPmjLKysrRo0SItWrSoxO2K1vmMGTNGGzZsUKtWrVS/fn09+OCD+tOf/qTWrVsX26bo/9OZl9HjMsIOborCwkLZbDZ9+OGHJf51XjQ7cOnSJT3wwAPKzMzUmDFjFBkZKV9fX50+fVqPP/64CgsLHbbz8vKSm1v5r7Mv+ryN+vXrlzqmT58++sMf/qA1a9bo448/1osvvqhp06bp7bffVufOne21v/jii2rWrFmJ+yh6HoYNG6bFixdr+PDhiomJkb+/v2w2m+Lj4x2eg7Zt2+ro0aN655139PHHH+uf//ynZs2apZSUFD355JP2sc8995zi4uJKPObVHtP12L9/vypVqnTVMDJ8+HB169ZNa9eu1UcffaRx48YpOTlZn3zyiZo3b35dx3H2YtTSfqFcz+JgZ7nemaqSBAUFlRiKatasWWwxtHR5hkVynKXJzMzUhQsXrnksHx8f+fv7l9o/YcIEtW/fXgsXLnRYk+Qq0tLSrmucv7//db3Oit5Xf/7zn0v946XoD46GDRvq8OHDev/997Vu3TqtXr1a8+fP1/jx44vN8v3888+qXLlyuS68/r0i7OCmqFevnowxqlu3bomnvYp89dVX+uabb7R06VL179/f3v5bPxDNmX8Z5ebmas2aNQoPD1fDhg2vOrZmzZoaPHiwBg8erIyMDN1zzz2aOnWqOnfurHr16km6fErlWn9pvvXWW0pISHD40Lbz588rKyur2NjAwEANGDBAAwYMUG5urtq2bauJEyfqySeftM8qeXh43NBft6U5efKktmzZopiYmKvOekmXXwMjR47UyJEjdeTIETVr1kwzZ87Uv/71L0nO/T8rmtG6cp/ffPONJNkXwxadAsrKynL4BV00E3Gl662tdu3akqTDhw+rQ4cODn2HDx+29ztDZGSkjh07Vqy9WbNmJS4YL/pwzCuDds+ePbVly5ZrHishIeGqH6rYrl07tW/fXtOmTdP48eMd+q58Tn7t66+/VvXq1ct1Vke6/L68HosXL9bjjz9+zXE1atRQ1apVdenSpet6X/n6+urRRx/Vo48+qgsXLqhnz56aOnWqxo4d63C689ixY9f8GYOy4dJz3BQ9e/ZUpUqVNGnSpGJT78YY+xqWor90rxxjjLFf6nm9fH19i53yKotz586pX79+yszM1F//+terzgb8+njBwcEKCwuzn1KIiopSvXr1NGPGDPupnyudOXPG/u9KlSoVe57mzp1bbNbh12t/qlSpovr169uPGRwcbP+Lu+gv+9KO+VtlZmbqscce06VLl+xXKZXk7Nmz9lMoRerVq6eqVas6nG7x9fUtMcyVxffff681a9bY7+fk5GjZsmVq1qyZ/RRWUfjcunWrfVxeXp6WLl1abH/XW1uLFi0UHByslJQUh8f24Ycf6tChQ+ratWtZH1IxMTEx2r9/f7FTVo888oguXbrkcHolPz9fixcvVnR0tP1KLOnymp3169df8zZ69Ohr1jNx4kSlpaUVO61Ts2ZNNWvWTEuXLnV4Dvfv36+PP/5YXbp0KeMzcP2u5zGuX7++1NnPX6tUqZJ69eql1atXl/gpy1e+r379HvX09FSjRo1kjCl2Jdzu3bt13333leER4lqY2cFNUa9ePU2ZMkVjx47V8ePH1aNHD1WtWlXHjh3TmjVrNGjQID333HOKjIxUvXr19Nxzz+n06dPy8/PT6tWrr3sNQ5GoqCi9+eabSkpKUsuWLVWlShV169btqtucPn3aPsuQm5urgwcPatWqVUpLS9PIkSP1l7/8pdRtf/nlF9WqVUuPPPKImjZtqipVqmjDhg3asWOHfXbGzc1N//znP9W5c2c1btxYAwYM0G233abTp09r06ZN8vPz03vvvSdJeuihh7R8+XL5+/urUaNGSk1N1YYNGxQUFORw3EaNGql9+/b2z+jYuXOn/fL3IvPmzVObNm3UpEkTDRw4ULfffrvS09OVmpqq7777Tvv27bvm8/nNN9/oX//6l4wxysnJ0b59+7Rq1Srl5ubqpZdeUqdOna66bceOHdWnTx81atRI7u7uWrNmjdLT0xUfH28fFxUVpQULFmjKlCmqX7++goODi82OXK877rhDiYmJ2rFjh0JCQvT6668rPT1dixcvto958MEHFRERocTERI0aNUqVKlXS66+/rho1aujkyZMO+7ve2jw8PDRt2jQNGDBA7dq102OPPWa/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9N5772nVqlXasmWLvv/+e/Xs2bOCqgQAAK7mlgg7ubm56tu3r1599VVVq1bN3p6dna3XXntNL730kjp06KCoqCgtXrxYn3/+ub744osKrBgAALiKWyLsDBkyRF27dlVsbKxD+65du1RQUODQHhkZqYiICKWmpt7sMgEAgAtyr+gCruWNN97Q7t27tWPHjmJ9aWlp8vT0VEBAgEN7SEiI0tLSSt1nfn6+8vPz7fdzcnKcVi8AAHAtLj2zc+rUKT377LNasWKFvL29nbbf5ORk+fv722/h4eFO2zcAAHAtLh12du3apYyMDN1zzz1yd3eXu7u7tmzZojlz5sjd3V0hISG6cOGCsrKyHLZLT09XaGhoqfsdO3assrOz7bdTp06V8yMBAAAVxaVPY3Xs2FFfffWVQ9uAAQMUGRmpMWPGKDw8XB4eHtq4caN69eolSTp8+LBOnjypmJiYUvfr5eUlLy+vcq0dAAC4BpcOO1WrVtVdd93l0Obr66ugoCB7e2JiopKSkhQYGCg/Pz8NGzZMMTExuvfeeyuiZAAA4GJcOuxcj1mzZsnNzU29evVSfn6+4uLiNH/+/IouCwAAuIhbLuxs3rzZ4b63t7fmzZunefPmVUxBAADApbn0AmUAAIAbRdgBAACWRtgBAACWRtgBAACWRtgBAACWRtgBAACWRtgBAACWRtgBAACWRtgBAACWRtgBAACWRtgBAACWRtgBAACWRtgBAACWRtgBAACWRtgBAACWRtgBAACWRtgBAACWRtgBAACWRtgBAACWRtgBAACWRtgBAACWRtgBAACWRtgBAACWRtgBAACWRtgBAACWRtgBAACWRtgBAACWRtgBAACWRtgBAACWRtgBAACWRtgBAACWRtgBAACWRtgBAACW5vJhJzk5WS1btlTVqlUVHBysHj166PDhww5jzp8/ryFDhigoKEhVqlRRr169lJ6eXkEVAwAAV+LyYWfLli0aMmSIvvjiC61fv14FBQV68MEHlZeXZx8zYsQIvffee1q1apW2bNmi77//Xj179qzAqgEAgKtwr+gCrmXdunUO95csWaLg4GDt2rVLbdu2VXZ2tl577TWtXLlSHTp0kCQtXrxYDRs21BdffKF77723IsoGAAAuwuVndn4tOztbkhQYGChJ2rVrlwoKChQbG2sfExkZqYiICKWmplZIjQAAwHW4/MzO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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **4.0 Preprocessing**"
      ],
      "metadata": {
        "id": "bSd_mm7nJfWE"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 4.1 Drop Duplicates"
      ],
      "metadata": {
        "id": "kUutjQHqLQPy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df = df.drop_duplicates()"
      ],
      "metadata": {
        "id": "5IcZi0bzJivW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 4.2 Encode Categorical Variables"
      ],
      "metadata": {
        "id": "IeGK7WelJoiD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "categorical_cols = ['cp', 'restecg', 'slope', 'thal']\n",
        "for col in categorical_cols:\n",
        "    if df[col].dtype == 'object':\n",
        "        le = LabelEncoder()\n",
        "        df[col] = le.fit_transform(df[col])"
      ],
      "metadata": {
        "id": "D5nY99-OJtIR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 4.3 Define Features & Condition"
      ],
      "metadata": {
        "id": "EAj9TmYpJ8vh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "X = df.drop('condition', axis=1)\n",
        "y = df['condition']"
      ],
      "metadata": {
        "id": "_fwXs4RKKFEc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 4.4 Train Test Split"
      ],
      "metadata": {
        "id": "rpdbtF6rKQhO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)"
      ],
      "metadata": {
        "id": "VY2CXEETKUqY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 4.5 Scale Features"
      ],
      "metadata": {
        "id": "4N7uIEyAKZFg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "scaler = StandardScaler()\n",
        "X_train = scaler.fit_transform(X_train)\n",
        "X_test = scaler.transform(X_test)"
      ],
      "metadata": {
        "id": "MJ_SphudKcFs"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **5.0 Train Models**"
      ],
      "metadata": {
        "id": "Do5OD_xqKjTz"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 5.1 Logistic Regression"
      ],
      "metadata": {
        "id": "V0vPJXPLKsKl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "lr = LogisticRegression(max_iter=1000)\n",
        "lr.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "uW2Gi80QKnvu",
        "outputId": "c0cedac2-3674-4bbb-ef42-57ae2747171c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LogisticRegression(max_iter=1000)"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-1 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-1 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-1 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-1 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-1 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(max_iter=1000)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>LogisticRegression</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.linear_model.LogisticRegression.html\">?<span>Documentation for LogisticRegression</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>LogisticRegression(max_iter=1000)</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 5.2 Random Forest"
      ],
      "metadata": {
        "id": "ihwVlEs0L3Ua"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "rf = RandomForestClassifier(random_state=42)\n",
        "rf.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "k-adUSHiL6_g",
        "outputId": "0f2eb970-eeef-4e9b-f5c4-1736caf3f19d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomForestClassifier(random_state=42)"
            ],
            "text/html": [
              "<style>#sk-container-id-2 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-2 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-2 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-2 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-2 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-2 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-2 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-2 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-2 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>RandomForestClassifier</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.ensemble.RandomForestClassifier.html\">?<span>Documentation for RandomForestClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestClassifier(random_state=42)</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 5.3 SVM"
      ],
      "metadata": {
        "id": "K3PlJ2ThMBJa"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "svm = SVC(probability=True, random_state=42)\n",
        "svm.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "uMxdwTXFMDqQ",
        "outputId": "8050af59-210f-46db-efee-c92009237cde"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "SVC(probability=True, random_state=42)"
            ],
            "text/html": [
              "<style>#sk-container-id-3 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-3 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-3 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-3 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-3 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-3 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-3 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-3 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-3 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-3 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-3 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-3 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-3 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-3 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-3 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SVC(probability=True, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>SVC</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.svm.SVC.html\">?<span>Documentation for SVC</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>SVC(probability=True, random_state=42)</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 5.4 XGBoost"
      ],
      "metadata": {
        "id": "ixTVq5eRMHGV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "xg = xgb.XGBClassifier(use_label_encoder=False, eval_metric='logloss', random_state=42)\n",
        "xg.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 330
        },
        "id": "hf5P0p_OMLKW",
        "outputId": "a0ffe4e0-3238-442f-b573-6212f191d114"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.12/dist-packages/xgboost/training.py:183: UserWarning: [13:00:34] WARNING: /workspace/src/learner.cc:738: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  bst.update(dtrain, iteration=i, fobj=obj)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
              "              colsample_bylevel=None, colsample_bynode=None,\n",
              "              colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
              "              enable_categorical=False, eval_metric='logloss',\n",
              "              feature_types=None, feature_weights=None, gamma=None,\n",
              "              grow_policy=None, importance_type=None,\n",
              "              interaction_constraints=None, learning_rate=None, max_bin=None,\n",
              "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
              "              max_delta_step=None, max_depth=None, max_leaves=None,\n",
              "              min_child_weight=None, missing=nan, monotone_constraints=None,\n",
              "              multi_strategy=None, n_estimators=None, n_jobs=None,\n",
              "              num_parallel_tree=None, ...)"
            ],
            "text/html": [
              "<style>#sk-container-id-4 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-4 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-4 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-4 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-4 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-4 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-4 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-4 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-4 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-4 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-4 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-4 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-4 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-4 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-4 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-4 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
              "              colsample_bylevel=None, colsample_bynode=None,\n",
              "              colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
              "              enable_categorical=False, eval_metric=&#x27;logloss&#x27;,\n",
              "              feature_types=None, feature_weights=None, gamma=None,\n",
              "              grow_policy=None, importance_type=None,\n",
              "              interaction_constraints=None, learning_rate=None, max_bin=None,\n",
              "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
              "              max_delta_step=None, max_depth=None, max_leaves=None,\n",
              "              min_child_weight=None, missing=nan, monotone_constraints=None,\n",
              "              multi_strategy=None, n_estimators=None, n_jobs=None,\n",
              "              num_parallel_tree=None, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" checked><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>XGBClassifier</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://xgboost.readthedocs.io/en/release_3.0.0/python/python_api.html#xgboost.XGBClassifier\">?<span>Documentation for XGBClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
              "              colsample_bylevel=None, colsample_bynode=None,\n",
              "              colsample_bytree=None, device=None, early_stopping_rounds=None,\n",
              "              enable_categorical=False, eval_metric=&#x27;logloss&#x27;,\n",
              "              feature_types=None, feature_weights=None, gamma=None,\n",
              "              grow_policy=None, importance_type=None,\n",
              "              interaction_constraints=None, learning_rate=None, max_bin=None,\n",
              "              max_cat_threshold=None, max_cat_to_onehot=None,\n",
              "              max_delta_step=None, max_depth=None, max_leaves=None,\n",
              "              min_child_weight=None, missing=nan, monotone_constraints=None,\n",
              "              multi_strategy=None, n_estimators=None, n_jobs=None,\n",
              "              num_parallel_tree=None, ...)</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **6.0 Model Evaluation**"
      ],
      "metadata": {
        "id": "X9MP_l5MMYgU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "models = {'Logistic Regression': lr, 'Random Forest': rf, 'SVM': svm, 'XGBoost': xg}\n",
        "\n",
        "for name, model in models.items():\n",
        "    y_pred = model.predict(X_test)\n",
        "    y_proba = model.predict_proba(X_test)[:,1]\n",
        "\n",
        "    print(f\"\\n🔹 {name} Results:\")\n",
        "    print(\"Accuracy:\", accuracy_score(y_test, y_pred))\n",
        "    print(\"F1 Score:\", f1_score(y_test, y_pred))\n",
        "    print(\"ROC-AUC:\", roc_auc_score(y_test, y_proba))\n",
        "    print(classification_report(y_test, y_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1CFL_arrMeGx",
        "outputId": "5c659f1f-2663-485f-85a8-2ee1f36b176a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "🔹 Logistic Regression Results:\n",
            "Accuracy: 0.9166666666666666\n",
            "F1 Score: 0.9019607843137255\n",
            "ROC-AUC: 0.953125\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.86      1.00      0.93        32\n",
            "           1       1.00      0.82      0.90        28\n",
            "\n",
            "    accuracy                           0.92        60\n",
            "   macro avg       0.93      0.91      0.91        60\n",
            "weighted avg       0.93      0.92      0.92        60\n",
            "\n",
            "\n",
            "🔹 Random Forest Results:\n",
            "Accuracy: 0.8833333333333333\n",
            "F1 Score: 0.8627450980392157\n",
            "ROC-AUC: 0.9447544642857144\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.84      0.97      0.90        32\n",
            "           1       0.96      0.79      0.86        28\n",
            "\n",
            "    accuracy                           0.88        60\n",
            "   macro avg       0.90      0.88      0.88        60\n",
            "weighted avg       0.89      0.88      0.88        60\n",
            "\n",
            "\n",
            "🔹 SVM Results:\n",
            "Accuracy: 0.9\n",
            "F1 Score: 0.88\n",
            "ROC-AUC: 0.9397321428571428\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.84      1.00      0.91        32\n",
            "           1       1.00      0.79      0.88        28\n",
            "\n",
            "    accuracy                           0.90        60\n",
            "   macro avg       0.92      0.89      0.90        60\n",
            "weighted avg       0.92      0.90      0.90        60\n",
            "\n",
            "\n",
            "🔹 XGBoost Results:\n",
            "Accuracy: 0.85\n",
            "F1 Score: 0.8301886792452831\n",
            "ROC-AUC: 0.9441964285714286\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.83      0.91      0.87        32\n",
            "           1       0.88      0.79      0.83        28\n",
            "\n",
            "    accuracy                           0.85        60\n",
            "   macro avg       0.85      0.85      0.85        60\n",
            "weighted avg       0.85      0.85      0.85        60\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **7.0 Confusion Matrices**"
      ],
      "metadata": {
        "id": "yk7niwM0MkGF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "fig, axes = plt.subplots(2, 2, figsize=(12, 10))\n",
        "\n",
        "for ax, (name, model) in zip(axes.flatten(), models.items()):\n",
        "    y_pred = model.predict(X_test)\n",
        "    cm = confusion_matrix(y_test, y_pred)\n",
        "    sns.heatmap(cm, annot=True, fmt=\"d\", cmap=\"Blues\", ax=ax)\n",
        "    ax.set_title(f\"{name} Confusion Matrix\")\n",
        "    ax.set_xlabel(\"Predicted\")\n",
        "    ax.set_ylabel(\"Actual\")\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "fi59yiOQMoRJ",
        "outputId": "f4025499-b9b5-49b2-e346-56551f552399"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x1000 with 8 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **8.0 ROC Curves**"
      ],
      "metadata": {
        "id": "YREZ41k3M5vZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(8,6))\n",
        "\n",
        "for name, model in models.items():\n",
        "    y_proba = model.predict_proba(X_test)[:,1]\n",
        "    fpr, tpr, _ = roc_curve(y_test, y_proba)\n",
        "    plt.plot(fpr, tpr, label=f\"{name} (AUC={roc_auc_score(y_test, y_proba):.2f})\")\n",
        "\n",
        "plt.plot([0,1],[0,1],'k--')\n",
        "plt.xlabel(\"False Positive Rate\")\n",
        "plt.ylabel(\"True Positive Rate\")\n",
        "plt.title(\"ROC Curves\")\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 564
        },
        "id": "jdZsJEUCM-T0",
        "outputId": "838c1887-1e2a-4237-b55a-410c52d3b811"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **9.0 Features Importance**"
      ],
      "metadata": {
        "id": "rKIAqn4rNHJY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "importances = rf.feature_importances_\n",
        "features = X.columns\n",
        "\n",
        "plt.figure(figsize=(8,6))\n",
        "sns.barplot(x=importances, y=features)\n",
        "plt.title(\"Random Forest Feature Importance\")\n",
        "plt.show()\n",
        "\n",
        "xg_importances = xg.feature_importances_\n",
        "\n",
        "plt.figure(figsize=(8,6))\n",
        "sns.barplot(x=xg_importances, y=features)\n",
        "plt.title(\"XGBoost Feature Importance\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "8rjphEqbNKpl",
        "outputId": "8afa2804-2610-4a0c-db7b-e08d40479c37"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAtYAAAIQCAYAAACloSlvAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAVi1JREFUeJzt3Xl8Tdf+//H3keEkZDAFQYgQBDGXEtNtEIqaWr2qhlJaQ1WNzRchaGOoqVxD9bb0cqlr6FyKGoPUrMYS0qSlhiIxHiT794dfzu25iXlzQl7Px2M/mrP32nt/1rHr8bayzjoWwzAMAQAAAHgoOZxdAAAAAPA0IFgDAAAAJiBYAwAAACYgWAMAAAAmIFgDAAAAJiBYAwAAACYgWAMAAAAmIFgDAAAAJiBYAwAAACYgWAMAAAAmIFgDcJpXX31VHh4e+uWXXzIcGzt2rCwWi7755huH/TabTdOmTVOdOnWUJ08eubu7q3DhwnrhhRe0cOFCpaam2tsmJCTIYrE4bD4+PqpcubKmT5/u0NZZZsyYoblz595z+//tT/pWqFChR1LflStXNHLkSK1bt+6RXP9hWSwW9enTx9llPLDNmzdr5MiRunDhgrNLAWACV2cXACD7mjRpkr777ju9+eab+vHHH+37jx8/rlGjRqlt27Zq3ry5ff+ZM2fUtGlT7dixQxERERo2bJjy5s2rP/74Q6tXr9Yrr7yio0ePavjw4Q73ad++vZ5//nlJUnJysr777ju99dZb+vXXXzVhwoTH09nbmDFjhvLnz68uXbrc8zmNGjVSp06dHPZ5enqaXNktV65cUXR0tCSpQYMGj+Qe2dnmzZsVHR2tLl26KHfu3M4uB8BDIlgDcJoCBQpo3Lhx6tGjh+bNm6fOnTtLknr16iU3NzdNnTrVoX3Hjh21a9cuLV26VG3atHE4FhkZqe3bt+vw4cMZ7lO1alW9+uqr9te9evVSzZo19e9//9vpwfpBlC5d2qE/T6KbN28qLS1N7u7uzi7FKS5fvqxcuXI5uwwAJmMqCACnev311xUWFqaBAwfqzz//1KJFi7RixQqNGTNGRYoUsbfbsmWLVq5cqR49emQI1emqV6+uDh063PWeFotFBQsWlKtrxrGFGTNmqHz58rJarSpcuLB69+6d6a/p//Of/6hatWry9PRU/vz59eqrr+r33393aPPHH3/otddeU9GiRWW1WuXv76+WLVsqISFBkhQYGKj9+/dr/fr19ikdZowK//777+ratasKFiwoq9Wq8uXL65NPPnFoc/36dUVFRalatWry9fVVrly5VLduXa1du9beJiEhQX5+fpKk6Ohoe40jR46UdGsEO7N6u3TposDAQIfrWCwWffDBB5oyZYpKliwpq9WqAwcOSJIOHTqkF198UXnz5pWHh4eqV6+ur7766oH6vm7dOlksFi1evFjR0dEqUqSIvL299eKLLyo5OVk2m039+vVTgQIF5OXlpddee002m83hGunTSxYsWKAyZcrIw8ND1apV04YNGzLcb9euXWratKl8fHzk5eWl8PBwbd261aHN3LlzZbFYtH79evXq1UsFChRQ0aJFNXLkSA0aNEiSVKJECfv7m/58fPrpp3ruuedUoEABWa1WlStXTjNnzsxQQ2BgoJo3b65NmzapRo0a8vDwUFBQkD777LMMbS9cuKB33nlHgYGBslqtKlq0qDp16qSzZ8/a29hsNo0YMUKlSpWS1WpVQECABg8enOF9ApARI9YAnMpisWj27NmqUqWKevbsqY0bN6p69erq3bu3Q7uvv/5akh5opPbKlSv24JCSkqLvv/9eK1asUGRkpEO7kSNHKjo6Wg0bNlTPnj11+PBhzZw5U9u2bVNsbKzc3Nwk3QpKr732mp555hnFxMTo1KlTmjp1qmJjY7Vr1y77r/Tbtm2r/fv366233lJgYKBOnz6tVatWKTExUYGBgZoyZYreeusteXl5aejQoZKkggUL3rU/165dcwhCkuTt7S2r1apTp07p2WeftYdDPz8/ff/99+rWrZtSUlLUr18/+/vw8ccfq3379urevbsuXryof/7zn4qIiNBPP/2kypUry8/PTzNnzlTPnj3VunVr+z9oKlaseN9/BtKtoHjt2jX16NFDVqtVefPm1f79+xUWFqYiRYro3XffVa5cubR48WK1atVKS5cuVevWrR/oXjExMfL09NS7776ro0ePatq0aXJzc1OOHDl0/vx5jRw5Ulu3btXcuXNVokQJRUVFOZy/fv16ff755+rbt6+sVqtmzJihJk2a6KefflKFChUkSfv371fdunXl4+OjwYMHy83NTbNnz1aDBg20fv161axZ0+GavXr1kp+fn6KionT58mU1bdpUv/zyixYuXKjJkycrf/78kmT/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YsUK1alTR7lz51a+fPnUvHlzxcfH249v3rxZlStXloeHh6pXr64vvvhCFotFu3fvtrfZt2+fmjZtKi8vLxUsWFAdO3bU2bNnndAbAAAAOFu2DdaXL19W//79tX37dq1Zs0Y5cuRQ69atlZaWppSUFLVo0UKhoaHauXOnRo8erSFDhjicf+HCBT333HOqUqWKtm/frhUrVujUqVNq167dbe9ps9mUkpLisAEAAODp4OrsApylbdu2Dq8/+eQT+fn56cCBA9q0aZMsFovmzJkjDw8PlStXTr///ru6d+9ubz99+nRVqVJF77//vsM1AgIC9Msvv6h06dIZ7hkTE6Po6OhH1ykAAAA4TbYdsT5y5Ijat2+voKAg+fj4KDAwUJKUmJiow4cPq2LFivLw8LC3r1GjhsP5e/bs0dq1a+Xl5WXfypYtK0kOU0r+KjIyUsnJyfYtKSnp0XQOAAAAj122HbFu0aKFihcvrjlz5qhw4cJKS0tThQoVdP369Xs6/9KlS2rRooXGjRuX4Zi/v3+m51itVlmt1oeqGwAAAFlTtgzWf/75pw4fPqw5c+aobt26kqRNmzbZj5cpU0bz58+XzWazB+Ft27Y5XKNq1apaunSpAgMD5eqaLd9GAAAA/EW2nAqSJ08e5cuXTx999JGOHj2qH3/8Uf3797cff+WVV5SWlqYePXro4MGDWrlypT744ANJksVikST17t1b586dU/v27bVt2zbFx8dr5cqVeu2115SamuqUfgEAAMB5smWwzpEjhxYtWqQdO3aoQoUKeueddzRhwgT7cR8fH3399dfavXu3KleurKFDhyoqKkqS7POuCxcurNjYWKWmpqpx48YKDQ1Vv379lDt3buXIkS3fVgAAgGwt285haNiwoQ4cOOCwzzAM+8+1a9fWnj177K8XLFggNzc3FStWzL4vODhYy5Yte/TFAgAAIMvLtsH6bj777DMFBQWpSJEi2rNnj4YMGaJ27drJ09PT2aUBAAAgCyJY38Yff/yhqKgo/fHHH/L399dLL72k9957z9llAQAAIIsiWN/G4MGDNXjwYGeXAQAAgCcEn7IDAAAATECwBgAAAExAsAYAAABMQLAGAAAATMCHF7OADWPay8fHx9llAAAA4CEwYg0AAACYgGANAAAAmIBgDQAAAJiAYA0AAACYgGANAAAAmIBgDQAAAJiA5fay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pUesDcPQzZs3nV0GAAAAcFdOC9ZdunTR+vXrNXXqVFksFlksFs2dO1cWi0Xff/+9qlWrJqvVqk2bNiktLU0xMTEqUaKEPD09ValSJS1ZssR+rfPnz6tDhw7y8/OTp6engoOD9emnn0qSSpQoIUmqUqWKLBaLGjRo4FBHdHS0/Pz85OPjozfffFPXr1+3H2vQoIH69OmjPn36yNfXV/nz59fw4cNlGIa9zYwZMxQcHCwPDw8VLFhQL7744iN81wAAAJBVuTrrxlOnTtUvv/yiChUqaNSoUZKk/fv3S5LeffddffDBBwoKClKePHkUExOj+fPna9asWQoODtaGDRv06quvys/PT/Xr19fw4cN14MABff/998qfP7+OHj2qq1evSpJ++ukn1ahRQ6tXr1b58uXl7u5ur2HNmjXy8PDQunXrlJCQoNdee0358uXTe++9Z28zb948devWTT/99JO2b9+uHj16qFixYurevbu2b9+uvn376l//+pdq166tc+fOaePGjY/xXQQAAEBW4bRg7evrK3d3d+XMmVOFChWSJB06dEiSNGrUKDVq1EiSZLPZ9P7772v16tWqVauWJCkoKEibNm3S7NmzVb9+fSUmJqpKlSqqXr26JCkwMNB+Hz8/P0lSvnz57PdJ5+7urk8++UQ5c+ZU+fLlNWrUKA0aNEijR49Wjhy3BvMDAgI0efJkWSwWlSlTRj///LMmT56s7t27KzExUbly5VLz5s3l7e2t4sWLq0qVKrfts81mk81ms79OSUl5mLcQAAAAWUiWnGOdHpAl6ejRo7py5YoaNWokLy8v+/bZZ58pPj5ektSzZ08tWrRIlStX1uDBg7V58+Z7uk+lSpWUM2dO++tatWrp0qVLSkpKsu979tlnZbFYHNocOXJEqampatSokYoXL66goCB17NhRCxYs0JUrV257v5iYGPn6+tq3gICAe35PAAAAkLVlyWCdK1cu+8+XLl2SJH377bfavXu3fTtw4IB9nnXTpk3166+/6p133tGJEycUHh6ugQMHPvI6vb29tXPnTi1cuFD+/v6KiopSpUqVdOHChUzbR0ZGKjk52b79NcADAADgyebUYO3u7q7U1NQ7tilXrpysVqsSExNVqlQph+2vI75+fn7q3Lmz5s+frylTpuijjz6y30NSpvfZs2ePfS62JG3dulVeXl4O142Li3M4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eDK4OruA/+Xu7u4wj/lexMbGqkuXLmrdurWkWyPY6R96zMyOHTuUlpamiRMnKkeOW/+2WLx4sUObihUras2aNYqOjr6/DtyB1WqV1Wo17XoAAADIOrLciHVgYKDi4uKUkJCgs2fP3nEEOF1wcLCWLVum3bt3a8+ePXrllVfueF6pUqV048YNTZs2TceOHdO//vUvzZo1y6FNZGSktm3bpl69emnv3r06dOiQZs6caZ+DDQAAAPxVlgvWAwcOlIuLi8qVKyc/P787zpNON2nSJOXJk0e1a9dWixYtFBERoapVq962faVKlTRp0iSNGzdOFSpU0IIFCxQTE+PQpnTp0vrhhx+0Z88e1ahRQ7Vq1dKXX34pV9csN8gPAACALCDLrQqSnaR/ypRVQZyLVUEAAMDtPJWrggAAAABZGcEaAAAAMAHBGgAAADABwRoAAAAwAcEaAAAAMAHBGgAAADABwRoAAAAwAcEaAAAAMAFfI5gFbBjT/q4LjgMAACBrY8QaAAAAMAHBGgAAADABwRoAAAAwAcEaAAAAMAHBGgAAADABwRoAAAAwAcvtZQH1hi2Ui9XT2WUAcIIdEzo5uwQAgEkYsQYAAABMQLAGAAAATECwBgAAAExAsAYAAABMQLAGAAAATECwBgAAAExAsAYAAABMQLAGAAAATECwBgAAAExAsAYAAABMQLAGAAAATPDEBuu0tDTFxMSoRIkS8vT0VKVKlbRkyRIZhqGGDRsqIiJChmFIks6dO6eiRYsqKipKkpSamqpu3brZzy1TpoymTp3qcP0uXbqoVatW+uCDD+Tv7698+fKpd+/eunHjhr3NyZMn1axZM3l6eqpEiRL697//rcDAQE2ZMuWxvQ8AAADIGlydXcCDiomJ0fz58zVr1iwFBwdrw4YNevXVV+Xn56d58+YpNDRUH374od5++229+eabKlKkiD1Yp6WlqWjRovrPf/6jfPnyafPmzerRo4f8/f3Vrl07+z3Wrl0rf39/rV27VkePHtXLL7+sypUrq3v37pKkTp066ezZs1q3bp3c3NzUv39/nT59+rY122w22Ww2++uUlJRH9O4AAADgcXsig7XNZtP777+v1atXq1atWpKkoKAgbdq0SbNnz9a///1vzZ49W506ddIff/yh7777Trt27ZKr663uurm5KTo62n69EiVKaMuWLVq8eLFDsM6T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AgMDFRoaql69esnLy8uh3eXLlzVz5kxNmDBBTZs2Vbly5TRnzhx5enrqn//8p0PbESNGqFGjRgoNDdW8efN06tQpLV++XJIUExOjDh06qF+/fgoODlbt2rX14Ycf6rPPPtO1a9cyrTEmJka+vr72LSAg4NG8GQAAAHjsnppgXalSJYWHhys0NFQvvfSS5syZo/Pnz2doFx8frxs3bigsLMy+z83NTTVq1NDBgwcd2taqVcv+c968eVWmTBl7mz179mju3Lny8vKybxEREUpLS9Px48czrTEyMlLJycn2LSkpyYyuAwAAIAtwdXYBZnFxcdGqVau0efNm/fDDD5o2bZqGDh2quLi4R3K/S5cu6Y033lDfvn0zHCtWrFim51itVlmt1kdSDwAAAJzrqRmxliSLxaKwsDBFR0dr165dcnd3t0/dSFeyZEm5u7srNjbWvu/GjRvatm2bypUr59B269at9p/Pnz+vX375RSEhIZKkqlWr6sCBAypVqlSGzd3d/RH2EgAAAFnRUzNiHRcXpzVr1qhx48YqUKCA4uLidObMGYWEhGjv3r32drly5VLPnj01aNAg5c2bV8WKFdP48eN15coVdevWzeGao0aNUr58+VSwYEENHTpU+fPnt3/RzJAhQ/Tss8+qT58+ev3115UrVy4dOHBAq1at0vTp0x9n1wEAAJAFPDXB2sfHRxs2bNCUKVOUkpKi4sWLa+LEiWratKk+//xzh7Zjx45VWlqaOnbsqIsXL6p69epauXKl8uTJk6Hd22+/rSNHjqhy5cr6+uuv7aPRFStW1Pr16zV06FDVrVtXhmGoZMmSevnllx9bnwEAAJB1WIzM1qPL5tatW6e//e1vOn/+vHLnzv3I7pOSkiJfX19VemuWXKyej+w++K8dEzo5uwQAAPAESc9rycnJ8vHxuWPbp2qONQAAAOAsBGsAAADABE/NHGszNWjQINNvbAQAAABuhxFrAAAAwAQEawAAAMAEBGsAAADABARrAAAAwAQEawAAAMAErAqSBWwY0/6uC44DAAAga2PEGgAAADABwRoAAAAwAcEaAAAAMAHBGgAAADABwRoAAAAwAcEaAAAAMAHL7WUB9YYtlIvV09llAMATZ8eETs4uAQDsGLEGAAAATECwBgAAAExAsAYAAABMQLAGAAAATECwBgAAAExAsAYAAABMQLAGAAAA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B3gc7uc5mTNnjurWras8efIoT548atiwYYb25JI7I1ib6PPPP1f//v01YsQI7dy5U5UqVVJERIROnz6dafvNmzerffv26tatm3bt2qVWrVqpVatW2rdvn73N+PHj9eGHH2rWrFmKi4tTrly5FBERoWvXrj2ubsFEj+IZkaQmTZro5MmT9m3hwoWPozt4RO73Obly5YqCgoI0duxYFSpUyJRrImt7FM+IJJUvX97h75JNmzY9qi7gMbjf52TdunVq37691q5dqy1btiggIECNGzfW77//bm9DLrkLA6apUaOG0bt3b/vr1NRUo3DhwkZMTEym7du1a2c0a9bMYV/NmjWNN954wzAMw0hLSzMKFSpkTJgwwX78woULhtVqNRYuXPgIeoBHzexnxDAMo3PnzkbLli0fSb1wjvt9Tv6qePHixuTJk029JrKeR/GMjBgxwqhUqZKJVcLZHvb/+5s3bxre3t7GvHnzDMMgl9wLRqxNcv36de3YsUMNGza078uRI4caNmyoLVu2ZHrOli1bHNpLUkREhL398ePH9ccffzi08fX1Vc2aNW97TWRdj+IZSbdu3ToVKFBAZcqUUc+ePfXnn3+a3wE8Fg/ynDjjmnCeR/nneeTIERUuXFhBQUHq0KGDEhMTH7ZcOIkZz8mVK1d048YN5c2bVxK55F4QrE1y9uxZpaamqmDBgg77CxYsqD/++CPTc/744487tk//7/1cE1nXo3hGpFvTQD777DOtWbNG48aN0/r169W0aVOlpqaa3wk8cg/ynDjjmnCeR/XnWbNmTc2dO1crVqzQzJkzdfz4cdWtW1cXL1582JLhBGY8J0OGDFHhwoXtQZpccneuzi4AwMP5+9//bv85NDRUFStWVMmSJbVu3TqFh4c7sTIAT5KmTZvaf65YsaJq1qyp4sWLa/HixerWrZsTK4MzjB07VosWLdK6devk4eHh7HKeGIxYmyR//vxycXHRqVOnHPafOnXqth8UKVSo0B3bp//3fq6JrOtRPCOZCQoKUv78+XX06NGHLxqP3YM8J864Jpzncf155s6dW6VLl+bvkifUwzwnH3zwgcaOHasffvhBFStWtO8nl9wdwdok7u7uqlatmtasWWPfl5aWpjVr1qhWrVqZnlOrVi2H9pK0atUqe/sSJUqoUKFCDm1SUlIUFxd322si63oUz0hmfvvtN/3555/y9/c3p3A8Vg/ynDjjmnCex/XneenSJcXHx/N3yRPqQZ+T8ePHa/To0VqxYoWqV6/ucIxccg+c/enJp8miRYsMq9VqzJ071zhw4IDRo0cPI3fu3MYff/xhGIZhdOzY0Xj33Xft7WNjYw1XV1fjgw8+MA4ePGiMGDHCcHNzM37++Wd7m7Fjxxq5c+c2vvzyS2Pv3r1Gy5YtjRIlShhXr1597P3DwzP7Gbl48aIxcOBAY8uWLcbx48eN1atXG1WrVjWCg4ONa9euOaWPeHj3+5zYbDZj165dxq5duwx/f39j4MCBxq5du4wjR47c8zXxZHkUz8iAAQOMdevWGcePHzdiY2ONhg0bGvnz5zdOnz792PsHc9zvczJ27FjD3d3dWLJkiXHy5En7dvHiRYc25JLbI1ibbNq0aUaxYsUMd3d3o0aNGsbWrVvtx+rXr2907tzZof3ixYuN0qVLG+7u7kb58uWNb7/91uF4WlqaMXz4cKNgwYKG1Wo1wsPDjcOHDz+OruARMfMZuXLlitG4cWPDz8/PcHNzM4oXL250796dsPQUuJ/n5Pjx44akDFv9+vXv+Zp48pj9jLz88suGv7+/4e7ubhQpUsR4+eWXjaNHjz7GHuFRuJ/npHjx4pk+JyNGjLC3IZfcmcUwDMMJA+UAAADAU4U51gAAAIAJCNYAAACACQjWAAAAgAkI1gAAAIAJCNYAAACACQjWAAAAgAkI1gAAAIAJCNYAAACACQjWAAAAgAkI1gAAAIAJCNYAAACACQjWAAAAgAn+H2cteYi8wMQSAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **10.0 Hyper Tuning**"
      ],
      "metadata": {
        "id": "aqAIUsFvRaOm"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 10.1 Decision Tree Hyper Tuning"
      ],
      "metadata": {
        "id": "XlfM3Ms2RmGl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.model_selection import GridSearchCV\n",
        "\n",
        "dt_params = {\n",
        "    \"max_depth\": [3, 5, 7, None],\n",
        "    \"min_samples_split\": [2, 5, 10],\n",
        "    \"min_samples_leaf\": [1, 2, 4]\n",
        "}\n",
        "dt_grid = GridSearchCV(DecisionTreeClassifier(random_state=42),\n",
        "                       param_grid=dt_params,\n",
        "                       cv=5,\n",
        "                       scoring=\"accuracy\")\n",
        "dt_grid.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 165
        },
        "id": "gvLoamy8RsnG",
        "outputId": "eb9f5573-3b73-41fe-f9f5-fe4095ca353c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GridSearchCV(cv=5, estimator=DecisionTreeClassifier(random_state=42),\n",
              "             param_grid={'max_depth': [3, 5, 7, None],\n",
              "                         'min_samples_leaf': [1, 2, 4],\n",
              "                         'min_samples_split': [2, 5, 10]},\n",
              "             scoring='accuracy')"
            ],
            "text/html": [
              "<style>#sk-container-id-5 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-5 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-5 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-5 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-5 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-5 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-5 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-5 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-5 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-5 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-5 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-5 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-5 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-5 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-5 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-5 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-5\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=5, estimator=DecisionTreeClassifier(random_state=42),\n",
              "             param_grid={&#x27;max_depth&#x27;: [3, 5, 7, None],\n",
              "                         &#x27;min_samples_leaf&#x27;: [1, 2, 4],\n",
              "                         &#x27;min_samples_split&#x27;: [2, 5, 10]},\n",
              "             scoring=&#x27;accuracy&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>GridSearchCV</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.model_selection.GridSearchCV.html\">?<span>Documentation for GridSearchCV</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>GridSearchCV(cv=5, estimator=DecisionTreeClassifier(random_state=42),\n",
              "             param_grid={&#x27;max_depth&#x27;: [3, 5, 7, None],\n",
              "                         &#x27;min_samples_leaf&#x27;: [1, 2, 4],\n",
              "                         &#x27;min_samples_split&#x27;: [2, 5, 10]},\n",
              "             scoring=&#x27;accuracy&#x27;)</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" ><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>best_estimator_: DecisionTreeClassifier</div></div></label><div class=\"sk-toggleable__content fitted\"><pre>DecisionTreeClassifier(max_depth=3, random_state=42)</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" ><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>DecisionTreeClassifier</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.tree.DecisionTreeClassifier.html\">?<span>Documentation for DecisionTreeClassifier</span></a></div></label><div class=\"sk-toggleable__content fitted\"><pre>DecisionTreeClassifier(max_depth=3, random_state=42)</pre></div> </div></div></div></div></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 10.2 Random Forest Tuning"
      ],
      "metadata": {
        "id": "OqyanVoVRuxy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "rf_params = {\n",
        "    \"n_estimators\": [100, 200],\n",
        "    \"max_depth\": [3, 5, 7, None],\n",
        "    \"min_samples_split\": [2, 5, 10],\n",
        "    \"min_samples_leaf\": [1, 2, 4]\n",
        "}\n",
        "rf_grid = GridSearchCV(RandomForestClassifier(random_state=42),\n",
        "                       param_grid=rf_params,\n",
        "                       cv=5,\n",
        "                       scoring=\"accuracy\",\n",
        "                       n_jobs=-1)\n",
        "rf_grid.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 165
        },
        "id": "jk12vaKzR1L3",
        "outputId": "68af9f50-860f-4e95-803d-66c11896cae7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GridSearchCV(cv=5, estimator=RandomForestClassifier(random_state=42), n_jobs=-1,\n",
              "             param_grid={'max_depth': [3, 5, 7, None],\n",
              "                         'min_samples_leaf': [1, 2, 4],\n",
              "                         'min_samples_split': [2, 5, 10],\n",
              "                         'n_estimators': [100, 200]},\n",
              "             scoring='accuracy')"
            ],
            "text/html": [
              "<style>#sk-container-id-6 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-6 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-6 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-6 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-6 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-6 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-6 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-6 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-6 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-6 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-6 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-6 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-6 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-6 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-6 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-6 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-6 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-6 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-6 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-6\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=5, estimator=RandomForestClassifier(random_state=42), n_jobs=-1,\n",
              "             param_grid={&#x27;max_depth&#x27;: [3, 5, 7, None],\n",
              "                         &#x27;min_samples_leaf&#x27;: [1, 2, 4],\n",
              "                         &#x27;min_samples_split&#x27;: [2, 5, 10],\n",
              "                         &#x27;n_estimators&#x27;: [100, 200]},\n",
              "             scoring=&#x27;accuracy&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" ><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>GridSearchCV</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.model_selection.GridSearchCV.html\">?<span>Documentation for GridSearchCV</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>GridSearchCV(cv=5, estimator=RandomForestClassifier(random_state=42), n_jobs=-1,\n",
              "             param_grid={&#x27;max_depth&#x27;: [3, 5, 7, None],\n",
              "                         &#x27;min_samples_leaf&#x27;: [1, 2, 4],\n",
              "                         &#x27;min_samples_split&#x27;: [2, 5, 10],\n",
              "                         &#x27;n_estimators&#x27;: [100, 200]},\n",
              "             scoring=&#x27;accuracy&#x27;)</pre></div> </div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-9\" type=\"checkbox\" ><label for=\"sk-estimator-id-9\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>best_estimator_: RandomForestClassifier</div></div></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestClassifier(max_depth=3, random_state=42)</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-10\" type=\"checkbox\" ><label for=\"sk-estimator-id-10\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>RandomForestClassifier</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.ensemble.RandomForestClassifier.html\">?<span>Documentation for RandomForestClassifier</span></a></div></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestClassifier(max_depth=3, random_state=42)</pre></div> </div></div></div></div></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **11.0 Tuned Model Evaluation**"
      ],
      "metadata": {
        "id": "3wxCy6mOR160"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import cross_val_score\n",
        "\n",
        "tuned_models = {\n",
        "    \"Tuned Decision Tree\": dt_grid.best_estimator_,\n",
        "    \"Tuned Random Forest\": rf_grid.best_estimator_\n",
        "}\n",
        "\n",
        "results = {} # Initialize results dictionary\n",
        "\n",
        "for name, model in tuned_models.items():\n",
        "    y_train_pred = model.predict(X_train)\n",
        "    y_test_pred = model.predict(X_test)\n",
        "\n",
        "    train_acc = accuracy_score(y_train, y_train_pred)\n",
        "    test_acc = accuracy_score(y_test, y_test_pred)\n",
        "    cv_scores = cross_val_score(model, X_train, y_train, cv=5)\n",
        "\n",
        "    results[name] = {\n",
        "        \"Train Accuracy\": round(train_acc, 4),\n",
        "        \"Test Accuracy\": round(test_acc, 4),\n",
        "        \"CV Mean Accuracy\": round(np.mean(cv_scores), 4),\n",
        "        \"CV Std Dev\": round(np.std(cv_scores), 4)\n",
        "    }\n",
        "\n",
        "    print(f\"\\n{name} - Best Params: {model.get_params()}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NfPpAtP2R-Tu",
        "outputId": "3ecba6f1-7728-4348-915b-af8cb55562d4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Tuned Decision Tree - Best Params: {'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'random_state': 42, 'splitter': 'best'}\n",
            "\n",
            "Tuned Random Forest - Best Params: {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': 3, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': None, 'oob_score': False, 'random_state': 42, 'verbose': 0, 'warm_start': False}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **12.0 Comparison**"
      ],
      "metadata": {
        "id": "6MYwpousSG9-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"\\n=== Final Model Comparison ===\")\n",
        "comparison_df = pd.DataFrame(results).T\n",
        "print(comparison_df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FzjafimKSJ4a",
        "outputId": "c204db8a-23f5-43bb-be65-a2e917e57626"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "=== Final Model Comparison ===\n",
            "                     Train Accuracy  Test Accuracy  CV Mean Accuracy  \\\n",
            "Tuned Decision Tree          0.8481         0.7667            0.7684   \n",
            "Tuned Random Forest          0.8734         0.8500            0.8445   \n",
            "\n",
            "                     CV Std Dev  \n",
            "Tuned Decision Tree      0.0732  \n",
            "Tuned Random Forest      0.0645  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **13.0 Test with New Input**"
      ],
      "metadata": {
        "id": "esoLZzMdjKHg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Example new patient input (values must match dataset features order)\n",
        "# The features are: age, sex, cp, trestbps, chol, fbs, restecg,\n",
        "# thalach, exang, oldpeak, slope, ca, thal\n",
        "\n",
        "new_data = {\n",
        "    \"age\": [55],\n",
        "    \"sex\": [1],         # 1 = male, 0 = female\n",
        "    \"cp\": [2],          # chest pain type (encoded)\n",
        "    \"trestbps\": [140],  # resting blood pressure\n",
        "    \"chol\": [250],      # serum cholesterol\n",
        "    \"fbs\": [0],         # fasting blood sugar > 120 mg/dl\n",
        "    \"restecg\": [1],     # resting ECG results\n",
        "    \"thalach\": [160],   # maximum heart rate achieved\n",
        "    \"exang\": [0],       # exercise induced angina\n",
        "    \"oldpeak\": [1.2],   # ST depression\n",
        "    \"slope\": [2],       # slope of ST segment\n",
        "    \"ca\": [0],          # number of major vessels colored\n",
        "    \"thal\": [2]         # thalassemia (encoded)\n",
        "}"
      ],
      "metadata": {
        "id": "PiDP4slijRkA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **13.1 Convert to DataFrame**"
      ],
      "metadata": {
        "id": "Iuf8PdIBjfqF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "new_df = pd.DataFrame(new_data)"
      ],
      "metadata": {
        "id": "0PeoMla2jl5c"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **13.2 Feature Scaling**"
      ],
      "metadata": {
        "id": "woJod3rjjoVs"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "new_df_scaled = scaler.transform(new_df)"
      ],
      "metadata": {
        "id": "LharchSVjwgJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **13.3 Model Prediction**"
      ],
      "metadata": {
        "id": "bYJTU2Kwj00n"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"\\n=== Prediction on New Patient Data ===\")\n",
        "for name, model in models.items():\n",
        "    pred = model.predict(new_df_scaled)[0]\n",
        "    proba = model.predict_proba(new_df_scaled)[0][1]\n",
        "    print(f\"{name}: Predicted = {pred} (Probability of Heart Disease = {proba:.2f})\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iTM7M1cTj4kM",
        "outputId": "b155dfce-a854-4e1e-9169-a84ff50d6e89"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "=== Prediction on New Patient Data ===\n",
            "Logistic Regression: Predicted = 1 (Probability of Heart Disease = 0.59)\n",
            "Random Forest: Predicted = 0 (Probability of Heart Disease = 0.27)\n",
            "SVM: Predicted = 0 (Probability of Heart Disease = 0.43)\n",
            "XGBoost: Predicted = 0 (Probability of Heart Disease = 0.16)\n"
          ]
        }
      ]
    }
  ]
}